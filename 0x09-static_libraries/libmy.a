!<arch>
0-isupper.c/    0           0     0     644     206       `
/**
 * _isupper - checks if a character is uppercase
 * @c: character to check
 * Return: 1 if c is uppercase, 0 otherwise
 */
int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
return (1);
else
return (0);
}
0-memset.o/     0           0     0     644     306       `
#include <stdio.h>

/**
 * _memset - function to copy the number
 * @s: entry and return
 * @b: character to copy
 * @n: number of Bytes
 *
 * Return: The result and returns S
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int a;

	for (a = 0; a < n ; a++)
	{
		s[a] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     329       `
#include <stdio.h>

/**
 *_strcat - This is the main copy
 *@dest: This is my dest
 *@src: This is my source
 *
 * Return: This return to the result
 */

char *_strcat(char *dest, char *src)
{
	int a, b;

	for (a = 0; dest[a] != '\0'; a++)
	{
	}
	for (b = 0; src[b] != '\0'; b++)
	{
	dest[a] = src[b];
	a++;
	}
	return (dest);
}

1-isdigit.c/    0           0     0     644     209       `
/**
 * _isdigit - checks for a digit (0 through 9)
 * @c: the character to check
 *
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
if (c >= '0' && c <= '9')
return (1);
else
return (0);
}

1-memcpy.o/     0           0     0     644     345       `
#include <stdio.h>

/**
 * _memcpy - funcion copy Src to dest
 * @dest: result
 * @src: string
 * @n: n number bytes to copy
 *
 * Return: string copy
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int a;
	char *pDst = dest;
	char const *pSrc =  src;

	for (a = 0; a < n; a++)
	{
		*pDst++ = *pSrc++;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     539       `
#include <stdio.h>

/**
 * _strncat -function that concatenates two strings
 *
 * @dest: the output
 * @src: input source
 * @n: number
 *
 * Return: This is my return
 */
char *_strncat(char *dest, char *src, int n)
{
        int i, count;

        for (i = 0; dest[i] != '\0'; i++)
                ;
        for (count = 0; count < n && src[count] != '\0'; count++)
        {
                dest[i] = src[count];
                i++;
        }
        if (count < n)
        {
        dest[i] = '\0';
        }
        return (dest);
}

2-strchr.c/     0           0     0     644     422       `
#include <stdio.h>
#include <stddef.h>

/**
 * _strchr - Function that locates a character in a string
 * @s: input string
 * @c: the character
 * Return: Return to the character found
 */
char *_strchr(char *s, char c)
{
        for (; ; s++)
        {
                if (*s == c)
                        return (s);
                if (*s == 0)
                        return (NULL);
        }
        return (NULL);
}
2-strlen.c/     0           0     0     644     220       `
#include <stdio.h>

/**
 * _strlen - This function is equal to strlen
 *
 * @s: this is my entry
 *
 * Return: the last character
 */
int _strlen(char *s)
{
	int a;

	for (a = 0; s[a] != '\0' ; a++)
	{
	}
	return (a);
}
2-strncpy.o/    0           0     0     644     322       `
#include <stdio.h>

/**
 * _strncpy - the main
 * @dest: The dest
 * @src: the source
 * @n: the N
 *
 *Return: the return value
 */

char *_strncpy(char *dest, char *src, int n)
{
	int b;

	for (b = 0; b < n && src[b] != '\0' ; b++)
	{
	dest[b] = src[b];
	}
	for (; b  < n; b++)
	{
		dest[b] = '\0';
	}
	return (dest);
}
3-puts.c/       0           0     0     644     200       `
#include <stdio.h>

/**
 * _puts - function that prints a string
 *
 * @str: input string
 *
 */

void _puts(char *str)
{
int i;
for (i = 0; str[i] != '\0'; i++)
{
putchar(str[i]);
}
putchar('\n');
}
3-strcmp.c/     0           0     0     644     294       `
#include <stdio.h>

/**
 * _strcmp - the function
 * @s1: The entry
 * @s2: another entry
 * Return: The result
 */

int _strcmp(char *s1, char *s2)
{
	for (; (*s1 != '\0' && *s2 != '\0') && *s1 == *s2; s1++, s2++)
	{
	}
	if (*s1 == *s2)
	{
		return (0);
	}
	else
	{
		return (*s1 - *s2);
	}
}
3-strspn.c/     0           0     0     644     753       `
#include <stdio.h>

/**
 * _strspn - Function that gets the length of a prefix substring
 * @s: string literal
 * @accept: second string
 *
 * Return: number of bytes in the initial segment
 */

unsigned int _strspn(char *s, char *accept)
{
        unsigned int i, j, counter;

        counter = 0;
        for (i = 0; s[i] != '\0'; i++)
        {
                for (j = 0; accept[j] != '\0'; j++)
                {
                        if (accept[j] == s[i])
                        {
                                counter++;
                                break;
                        }
                }
                if (accept[j] != s[i])
                {
                break;
                }
        }
        return (counter);
}

4-isalpha.o/    0           0     0     644     271       `
#include <stdio.h>

/**
 * _isalpha - check the the entry to deteminate if is lower or upper
 *
 * @c: This is the entry
 * Return: Always 0.
 */

int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
	return (0);
	}
}

4-strpbrk.c/    0           0     0     644     606       `
#include <stdio.h>
#include <stddef.h>

/**
 * _strpbrk - Searches a string for any of a set of bytes
 * @s: input string
 * @accept: string to locate
 *
 * Return: Returns a pointer to the byte
 */
char *_strpbrk(char *s, char *accept)
{
        unsigned int i, count;

        for (i = 0; s[i] != '\0'; i++)
        {
                for (count = 0; accept[count] != '\0'; count++)
                {
                        if (accept[count] == s[i])
                        {
                                return (&s[i]);
                        }
                }
        }
        return (NULL);
}
5-strstr.c/     0           0     0     644     693       `
#include <stdio.h>

/**
 * _strstr - finds the first occurrence of a substring in a string
 * @haystack: pointer to string to search in
 * @needle: pointer to substring to search for
 *
 * Return: pointer to beginning of located substring, or NULL if not found
 */
char *_strstr(char *haystack, char *needle)
{
        int i, j;

        for (i = 0; haystack[i] != '\0'; i++)
        {
                for (j = 0; needle[j] != '\0'; j++)
                {
                        if (haystack[i + j] != needle[j])
                                break;
                }
                if (needle[j] == '\0')
                        return (&haystack[i]);
        }

        return (NULL);
}

6-abs.o/        0           0     0     644     245       `
#include <stdio.h>

/**
 * _abs - This is a absolute value
 *
 * @a: This is the entry
 *
 * Return: Always 0.
 */

int _abs(int a)
{
	if (a > 0)
	{
		return (a);
	}
	else if (a < 0)
	{
		a = a * -1;
		return (a);
	}
	else
	{
		return (a);
	}
}

9-strcpy.c/     0           0     0     644     288       `
#include <stdio.h>

/**
 * _strcpy - resets the value of the integer
 * @dest: destination of change
 * @src: source of change
 *
 * Return: the result
 */
char *_strcpy(char *dest, char *src)
{
char *temp = dest;
while (*src != '\0')
{
*dest++ = *src++;
}
*dest = '\0';
return (temp);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

